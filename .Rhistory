tkgrid(txt)
tkmark.set(txt,"insert","0.0")
tkfocus(txt)
tt  <- tktoplevel()
txt <- tktext(tt,bg="white",font="courier")
tkgrid(txt)
tkconfigure(txt, state="disabled")
tkinsert(txt,"end","Hello, world!")
tkfocus(txt)
tt  <- tktoplevel()
txt <- tktext(tt,bg="white",font="courier")
tkgrid(txt)
tkconfigure(txt, state="disabled")
tkinsert(txt,"end","Hello, world!")
tkfocus(txt)
tt  <- tktoplevel()
scr <- tkscrollbar(tt, repeatinterval=5,
command=function(...)tkyview(txt,...))
txt <- tktext(tt,bg="white",font="courier",yscrollcommand=function(...)tkset(scr,...))
tkgrid(txt,scr)
tkgrid.configure(scr,sticky="ns")
for (i in (1:100)) tkinsert(txt,"end",paste(i,"^ 2 =",i*i,"\n"))
tkconfigure(txt, state="disabled")
tkfocus(txt)
library(ggplot2)
df = tab$V1
df = data.frame(tab$V1,tab$V2,res.km$cluster)
View(df)
df = data.frame(v1=tab$V1,v2=tab$V2,class = res.km$cluster)
View(df)
res.km$centers
centers = data.frame(res.km$centers[,1,2])
centers = data.frame(res.km$centers[,1:2])
View(centers)
ggplot(data=df, aes(x=v1, y=v2, color=class )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
ggplot(data=df, aes(x=v1, y=v2, color=class ))
ggplot(data=df, aes(x=V1, y=V2, color=class ))
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
ggplot(data=df, aes(x=V1, y=V2, color=class ))
ggplot(data=df, aes(x=V1, y=V2, color=class ))
df = data.frame(V1=tab$V1,V2=tab$V2,class = res.km$cluster)
centers = data.frame(res.km$centers[,1:2])
ggplot(data=df, aes(x=V1, y=V2, color=class ))
View(df)
ggplot(data=df, aes(x=V1, y=V2, color=class ))
install.packages("beanplot")
library("beanplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
beanplot(as.numeric(tab.bis[,1]) ~ as.factor(tab.bis[,2]))
beanplot(as.numeric(tab.bis[,1]) ~ as.factor(tab.bis[,2]),horizontal = TRUE)
abline(v=mean(tab[,1]),col="orange",lwd = 3,lty=5)
text(mean(tab[,1]),3.5,"Mean Var1",col="orange",pos=2,srt=90,cex=.9)
abline(v=mean(tab[,2]),col="red",lwd = 3,lty=5)
text(mean(tab[,2]),3.5,"Mean Var2",col="red",pos=2,srt=90,cex=.9)
abline(v=mean(tab[,3]),col="magenta",lwd = 3,lty=5)
text(mean(tab[,3]),3.5,"Mean Var3",col="magenta",pos=2,srt=90,cex=.9)
beanplot(as.numeric(tab.bis[,1]) ~ as.factor(tab.bis[,2]),horizontal = TRUE,side = "both")
legend("bottomleft", fill = c("black", "grey"),legend = c("Group 2", "Group 1"))
centers
df
df = data.frame(V1=tab$V1,V2=tab$V2,class = res.km$cluster)
centers = data.frame(res.km$centers[,1:2])
# ggplot
ggplot(data=df, aes(x=V1, y=V2, color=class ))
library(ggplot2)
df = data.frame(V1=tab$V1,V2=tab$V2,class = res.km$cluster)
centers = data.frame(res.km$centers[,1:2])
# ggplot
res.km$cluster
d = ggplot(data=df, aes(x=V1, y=V2, color=class ))
d + geom_line()
d + geom_point()
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
d + geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
d
d +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE)
d +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color='Center')) +
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE) +
geom_point()
View(centers)
d +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2))
centers
d = ggplot(data=df, aes(x=V1, y=V2, color=class ))
d +
geom_point()
geom_point(data=centers, aes(x=V1,y=V2))
+
geom_point(data=centers, aes(x=V1,y=V2, color='Center'), size=52, alpha=.3, legend=FALSE) +
geom_point()
d = ggplot(data=df, aes(x=V1, y=V2, color=as.factor(class) ))
d +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2))
d +
geom_point()
ggplot(data=df, aes(x=V1, y=V2, color=as.factor(class) ))
+ geom_point()
d = d + geom_point()
d + geom_point(data=centers, aes(x=V1,y=V2)) +
demo()
demo()
install.packages("shin")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
iris
write.csv(iris,'iris.csv',sep=',', row.names = FALSE, col.names = TRUE)
write.csv(iris,"iris.csv",sep=",", row.names = FALSE, col.names = TRUE)
write.csv(iris,"iris.csv", row.names = FALSE, col.names = TRUE)
View(sc)
getpwd()
getwd()
write.csv(iris,"/Users/danba95/Documents/ProjetX/iris.csv",col.names = TRUE,row.names = FALSE,sep="\t")
write.csv(iris,"/Users/danba95/Documents/ProjetX/iris.csv")
write.csv(data.frame(iris),"/Users/danba95/Documents/ProjetX/iris.csv")
write.csv(data.frame(iris),"/Users/danba95/Documents/ProjetX/iris.csv",col.names = TRUE,row.names = FALSE,sep="\t")
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv")
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names = TRUE,row.names = FALSE)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names = T,row.names = FALSE)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names = T)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",colnames= T)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",colnames= TRUE)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",colnames= TRUE)
write.csv(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names= TRUE)
write.csv2(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names= TRUE)
write.table(data.frame(iris),file = "/Users/danba95/Documents/ProjetX/iris.csv",col.names= TRUE)
write.table(data.frame(iris),\
file = "/Users/danba95/Documents/ProjetX/iris.csv",\
col.names= TRUE,\
row.names = FALSE,\
sep=",")
write.table(data.frame(iris),
file = "/Users/danba95/Documents/ProjetX/iris.csv",
col.names= TRUE,
row.names = FALSE,
sep=",")
import <- function("/Users/danba95/Documents/ProjetX/iris.csv",header = TRUE",")
import("/Users/danba95/Documents/ProjetX/iris.csv",header = TRUE",")
import("/Users/danba95/Documents/ProjetX/iris.csv",header = TRUE)
import <- function(file,header = TRUE,sep = ","){
return( read.table(file,header = header,sep = sep))
}
import("/Users/danba95/Documents/ProjetX/iris.csv",header = TRUE)
# import
import <- function(file,header = TRUE,sep = ","){
return( read.table(file,header = header,sep = sep))
}
# export
export <- function(data,file,header = TRUE,sep = ","){
return(write.table(data,
file = file,
col.name s= header,
row.names = FALSE,
sep = sep))
}
# export
export <- function(data,file,header = TRUE,sep = ","){
return(write.table(data,file = file,col.names = header,row.names = FALSE,sep = sep))
}
export(iris,"/Users/danba95/Documents/ProjetX/iris0.csv")
require(ggplot)
require(ggplot2)
plot=qplot(iris[,1], data=data, geom="histogram")
iris[,1]
plot=qplot(iris[,1], geom="histogram")
plot
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(require(ggplot2))
return(qplot(Input[,col], geom="histogram"))
}
tracerHist(iris,col=1)
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(ggplot2)
return(qplot(Input[,col], geom="histogram"))
}
tracerHist(iris,col=1)
detach("package:ggplot2", unload=TRUE)
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(ggplot2)
return(qplot(Input[,col], geom="histogram"))
}
tracerHist(iris,col=1)
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(ggplot2)
return(qplot(Input[,col], geom="histogram",binwidth = x))
}
tracerHist(iris,col=1)
plot(tracerHist(iris,col=1))
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(ggplot2)
return(qplot(Input[,col], geom="histogram"))#,binwidth = x))
}
plot(tracerHist(iris,col=1))
tracerHist(iris,col=1)+stat_bin(binwidth = 1)
tracerHist(iris,col=1)+stat_bin(binwidth = 3)
tracerHist(iris,col=1)+stat_bin(binwidth = 1/3)
hist(iris[,1])
tracerHist(iris,col=1)+stat_bin(binwidth = 1/150)
tracerHist(iris,col=1)+stat_bin(binwidth = 1/50)
tracerHist <- function(Input,col=NULL){
#require(ggplot2)
#require(ggplot2)
library(ggplot2)
return(qplot(Input[,col], geom="histogram") + stat_bin(binwidth = 1/50))#,binwidth = x))
}
tracerHist(iris,col=1)
tracerHist(iris,col=1)
X = tracerHist(iris,col=1)
ggsave(x,file="graph1.pdf")
ggsave(X,file="graph1.pdf")
X = tracerHist("/Users/danba95/Documents/ProjetX/iris,col=1)
ggsave(X,file="/Users/danba95/Documents/ProjetX/graph1.pdf")
source("Briques.R")
source("/Users/danba95/Documents/ProjetX/Briques.R")
# import
import <- function(file,header = TRUE,sep = ","){
return( read.table(file,header = header,sep = sep))
}
# export
export <- function(data,file,header = TRUE,sep = ","){
return(write.table(data,file = file,col.names = header,row.names = FALSE,sep = sep))
}
# traitement
# histogram
tracerHist <- function(Input,col=NULL){
library(ggplot2)
return(qplot(Input[,col], geom="histogram") + stat_bin(binwidth = 1/50))#,binwidth = x))
}
# tracerHist(iris,col=1)#hist(iris[,1])
# export PDF
exportPDF <- function(input){
ggsave(input,file="/Users/danba95/Documents/ProjetX/graph2.pdf")
}
source("/Users/danba95/Documents/ProjetX/Briques.R")
exportPDF(tracerHist(import("/Users/danba95/Documents/ProjetX/iris.csv",header = TRUE),col=1))
(
13*10 +
12*5  +
15*5 +
14*5 +
13*5
)/30
(
13*10 +
12*5  +
15*5 +
14*5 +
13*5
)/30
8*5  +
(
13*10 +
8*5  +
15*5 +
14*5 +
13*5
)/30
(
13*10 +
8*5  +
11*5 +
14*5 +
13*5
)/30
(
13*10 +
8*5  +
11*5 +
12*5 +
13*5
)/30
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR(to_checkMD5sums = FALSE)
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR(to_checkMD5sums = FALSE)
install.packages("FactoMineR")
install.packages("gdata")
df = read.xls ("/Users/danba95/Desktop/La place des bénévoles dans la communication des festivals de musique actuellesA2.xlsx", sheet = 1, header = TRUE)
require(gdata)
df = read.xls ("/Users/danba95/Desktop/La place des bénévoles dans la communication des festivals de musique actuellesA2.xlsx", sheet = 1, header = TRUE)
View(df)
file1 = "/Users/danba95/Desktop/La place des bénévoles dans la communication des festivals de musique actuellesA2.xlsx"
df = read.xls (file1, sheet = 1, header = TRUE)
require(gdata)
file1 = "/Users/danba95/Desktop/La place des bénévoles dans la communication des festivals de musique actuellesA2.xlsx"
df = read.xls (file1, sheet = 1, header = TRUE)
fix(df)
require(gdata)
file1 = "/Users/danba95/Desktop/La place des bénévoles dans la communication des festivals de musique actuellesA2.xlsx"
df = read.xls (file1, sheet = 1, header = TRUE)
View(df)
colnames(df)
colnames(df)[5:]
colnames(df)[5:10]
colnames(df)[6:17]
colnames(df)[6:14]
df =  df[,-1]
View(df)
colnames(df)[6:14]
colnames(df)[5:13]
library(FactoMineR)
res.mca = MCA(df[,5:13])#, quanti.sup=19, quali.sup=c(20:36))
install.packages("dummy")
library("dummy", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
res.mca = MCA(df[,-c(5:13)])#, quanti.sup=19, quali.sup=c(20:36))
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind"))
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind", "var"))
plot.MCA(res.mca, invisible=c("ind"))
plot.MCA(res.mca)
plot.MCA(res.mca,pos=2)
plot.MCA(res.mca,pos=1)
plot.MCA(res.mca,Position(1))
plot.MCA(res.mca,cex=.5)
plot.MCA(res.mca,cex=.75)
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
res.mca = MCA(df, quanti.sup=c(5:13))#, quali.sup=c(20:36))
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind","quali.sup"), cex=0.7)
plotellipses(res.mca,keepvar=c(14:16))
plotellipses(res.mca,keepvar=c(1:4))
plotellipses(res.mca,keepvar=c(13:16))
plot.MCA(res.mca,cex=.75)
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind"), cex=0.7)
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-4,9))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-7,9))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-10,17))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-30,17))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-30,25))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-30,25),ylim =c(-30,25))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-30,25),ylim =c(-3,5))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-40,35),ylim =c(-3,5))
plot.MCA(res.mca, invisible=c("ind"), cex=0.7,xlim =c(-40,45),ylim =c(-3,5))
res.mca = MCA(df, quanti.sup=c(5:13))#, quali.sup=c(20:36))
summary(res.mca)
plot.MCA(res.mca,cex=.75)
res.pca = PCA(df[,c(5:13)], scale.unit=TRUE, ncp=3, graph=T)
res.pca = PCA(df[,c(5:13)], ncp=3, graph=T)
res.pca = PCA(df, ncp=3, quali.sup=c(1:4,14:16), graph=T)
res.pca = PCA(df, ncp=3, quali.sup=c(1:4), graph=T)
res.pca = PCA(df, ncp=3, quali.sup=c(1:4), graph=T)
res.pca = PCA(df[,1:13], ncp=3, quali.sup=c(1:4), graph=T)
plot(res.pca)
plot(res.pca,cex=.7)
plot(res.pca,cex=.47)
res.pca = PCA(df[,1:13], ncp=3, quali.sup=c(1:4), graph=T)
res.pca = PCA(df[,4:13], ncp=3, quali.sup=4, graph=T)
res.pca = PCA(df[,4:13], ncp=3, quali.sup=1, graph=T)
res.pca = PCA(df[,c(1,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(2,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(3,5:13)], ncp=3, quali.sup=1, graph=T)
res.pca$eig
res.pca$var
res.pca$quali.sup
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(4,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(14,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(15,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
res.pca = PCA(df[,c(16,5:13)], ncp=3, quali.sup=1, graph=T)
plot(res.pca,cex=.7)
rm(list = ls())
iris[,1]
Y = iris[,2:4]
Y
X
X = iris[,1]
lm(X~Y)
data = cbind(X,Y)
data
lm(X~.)
lm(X~.,data=data)
glm(X~.,data=data)
getwd()
system("pwd")
system("pwd")
shiny::runApp('Documents/GitHub/Coursera - Application')
install.packages("markdown")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
shiny::runApp('Documents/GitHub/Coursera - Application')
library(devtools)
library(shiny)
library(shinyapps)
setAccountInfo(name='adanba', token='1FFB53913C7D9BFBD16862C43D6C356A', secret='kwsMpYYpdw8WZ3u4DqzBScaClmnJRagHsC8O3cxX')
deployApp(appName = "Coursera-Application","/Users/danba95/Desktop/Coursera -AppsWeb2/")
library(devtools)
library(shiny)
library(shinyapps)
setAccountInfo(name='adanba', token='1FFB53913C7D9BFBD16862C43D6C356A', secret='kwsMpYYpdw8WZ3u4DqzBScaClmnJRagHsC8O3cxX')
deployApp(appName = "Coursera-Application","/Users/danba95/Desktop/Coursera -AppsWeb2/")
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
**Help** button on the toolbar.
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
rm(list = ls())
setwd("/Users/danba95/Desktop/slidify/")
slidify("apppres")
library(slidify)
slidify("apppres")
author("apppres")
library(slidify)
slidify("apppres")
slidify("index.Rmd")
library(slidifyLibraries)
slidify("index.Rmd")
sessionInfo()
install_version("stringr", version="0.6.2", type = "source")
install.packages('http://cran.r-project.org/src/contrib/Archive/stringr/stringr_0.6.2.tar.gz', type = 'source')
sessionInfo()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install.packages("~/Desktop/slidify/apppres/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
slidify("index.Rmd")
q("r")
q("r")
quit("r")
